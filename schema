Factory -> [ ...String | Factory, function(): Any ] | function(): Any
AsyncFactory -> [ ...String | AsyncFactory, function(): Promise ] | function(): Promise

Target -> [ ...String | Target, function(): Any ]
AsyncTarget -> function( parent: Node ): Promise<Target>

Node
  name: String?
  parents: List<String>

Kernel
  register( name: String, value: Any )
  registerFactory( name: String, factory: Factory )
  registerAsyncFactory( name: String, factory: Factory | AsyncFactory )
  resolve( name: String ): Any
  resolveAsync( name: String ): Promise<Any>
  unregister( name: String )
  invoke( factory: Factory ): Any
  invokeAsync( factory: Factory | AsyncFactory ): Promise<Any>
  invokeChild( parent: Node, factory: Factory ): Promise<Any>
  invokeChildAsync( parent: Node, factory: Factory | AsyncFactory ): Promise<Any>

targetFromFactory( factory: Factory ): Target
asyncTargetFromFactory( factory: Factory | AsyncFactory ): AsyncTarget

Redirector
  redirect( name: String, node: Node ): String | Void

Linker
  redirects: List<Redirector>
  objectFromTarget( target: Target, parent: Node? ): Any
  objectFromTargetAsync( target: Target, parent: Node? ): Promise<Any>

Resolver
  resolve( name: String, node: Node ): Factory | Void

AsyncResolver
  resolveAsync( String, Node ): Promise<Factory | Void>

Registry
  targets: Map<String, Target>
  asyncTargets: Map<String, AsyncTarget>
  resolvers: List<Resolver>
  asyncResolvers: List<AsyncResolver>
  targetForName( name: String ): Target
  targetForNameAsync( name: String ): Target
