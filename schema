List<T> -> Array<T>
Map<Key, Value> -> { [ Key ]: Value }
Null -> null
Void -> undefined

Factory -> [ ...String | Factory, function(): Any ] | function(): Any
AsyncFactory -> [ ...String | AsyncFactory, function(): Promise ] | function(): Promise

Parents -> List<String>

Target -> [ ...String | Target, function(): Any ]
AsyncTarget -> function( parents: Parents ): Promise<Target>

Kernel
  resolvers: List<Resolver>
  asyncResolvers: List<AsyncResolver>
  register( name: String, value: Any )
  registerFactory( name: String, factory: Factory )
  registerFactoryAsSingleton( name: String, factory: Factory )
  registerAsyncFactory( name: String, factory: Factory | AsyncFactory )
  registerAsyncFactoryAsSingleton( name: String, factory: Factory | AsyncFactory )
  resolve( name: String ): Any
  resolveAsync( name: String ): Promise<Any>
  unregister( name: String )
  invoke( factory: Factory ): Any
  invokeAsync( factory: Factory | AsyncFactory ): Promise<Any>
  invokeChild( factory: Factory, parents: Parents ): Promise<Any>
  invokeChildAsync( factory: Factory | AsyncFactory, parents: Parents ): Promise<Any>

targetFromFactory( factory: Factory ): Target
asyncFactoryFromFactory( factory: Factory ): AsyncFactory
asyncTargetFromAsyncFactory( factory: AsyncFactory ): AsyncTarget

Linker
  objectFromTarget( target: Target, parents: Parents ): Any
  objectFromTargetAsync( target: Target, parents: Parents ): Promise<Any>

Resolver
  resolve( name: String, parents: Parents ): Factory | Void

AsyncResolver
  resolveAsync( name: String, parents: Parents ): Promise<Factory | Void>

Registry
  targets: Map<String, Target>
  asyncTargets: Map<String, AsyncTarget>
  resolvers: List<Resolver>
  asyncResolvers: List<AsyncResolver>
  targetForName( name: String ): Target
  targetForNameAsync( name: String ): Target
